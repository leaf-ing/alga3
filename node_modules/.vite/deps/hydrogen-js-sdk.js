import {
  __commonJS
} from "./chunk-TWLJ45QX.js";

// node_modules/hydrogen-js-sdk/package.json
var require_package = __commonJS({
  "node_modules/hydrogen-js-sdk/package.json"(exports, module) {
    module.exports = {
      name: "hydrogen-js-sdk",
      version: "2.3.10",
      description: "\u672CSDK\u57FA\u4E8Ees6\u5F00\u53D1\uFF0C\u81F4\u529B\u6253\u9020\u57FA\u4E8E\u524D\u7AEF\u6DF7\u5408\u5F00\u53D1\u9700\u6C42\uFF0C\u652F\u6301\u5FAE\u4FE1\u5C0F\u7A0B\u5E8F\u3001H5\u3001\u5FEB\u5E94\u7528\u3001\u6E38\u620FCocos\u3001\u6DF7\u5408App\u7B49\u5E73\u53F0, \u6574\u4E2ASDK\uFF0C\u5C31dist\u76EE\u5F55\u4E0BBmob.*.js \u8FD9\u4E2A\u6587\u4EF6\u5373\u53EF\u4F7F\u7528\u5168\u90E8\u529F\u80FD\uFF0C\u8BF7\u4F7F\u7528\u6700\u65B0\u7248\u672C\u3002",
      main: "./index.js",
      typings: "./index.d.ts",
      scripts: {
        test: 'echo "Error: no test specified" && exit 1',
        build: "webpack --config config/prod.env.js",
        watch: "webpack --watch --config config/prod.env.js",
        dev: "webpack-dev-server --config config/dev.env.js"
      },
      repository: {
        type: "git",
        url: "git+https://github.com/bmob/hydrogen-js-sdk.git"
      },
      author: "Bmob",
      license: "ISC",
      bugs: {
        url: "https://github.com/bmob/hydrogen-js-sdk/issues"
      },
      homepage: "https://github.com/bmob/hydrogen-js-sdk#readme",
      dependencies: {
        "babel-runtime": "^6.26.0",
        "node.extend": "^2.0.0",
        webpack: "^3.12.0"
      },
      devDependencies: {
        "babel-core": "^6.26.3",
        "babel-loader": "^7.1.5",
        "babel-plugin-transform-runtime": "^6.23.0",
        "babel-preset-es2015": "^6.24.1",
        "clean-webpack-plugin": "^0.1.19",
        eslint: "^4.19.1",
        "eslint-config-standard": "^11.0.0",
        "eslint-friendly-formatter": "^4.0.1",
        "eslint-loader": "^2.0.0",
        "eslint-plugin-import": "^2.12.0",
        "eslint-plugin-node": "^6.0.1",
        "eslint-plugin-promise": "^3.7.0",
        "eslint-plugin-standard": "^3.1.0",
        "html-webpack-plugin": "^2.30.1",
        "uglifyjs-webpack-plugin": "^1.2.5",
        "webpack-dev-server": "^2.11.2"
      },
      directories: {
        doc: "docs"
      },
      keywords: [
        "Bmob"
      ]
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/config.js
var require_config = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/config.js"(exports, module) {
    var ROOT;
    var VERSION;
    try {
      ROOT = require_package();
      VERSION = `v${ROOT.version}`;
    } catch (e2) {
      VERSION = `v1.0.0`;
    }
    var HOST = "https://api.bmobcloud.com";
    var SECRET_KEY = "";
    var SECURITY_CODE = "";
    var APPLICATION_MASTER_KEY = "";
    var TYPE = 3;
    var PARAMETERS = {
      GENERATECODE: "/1/wechatApp/qr/generatecode",
      GETACCESSTOKEN: "/1/wechatApp/getAccessToken",
      SENDWEAPPMESSAGE: "/1/wechatApp/SendWeAppMessage",
      NOTIFYMSG: "/1/wechatApp/notifyMsg",
      REFUND: "/1/pay/refund",
      REQUESTSMSCODE: "/1/requestSmsCode",
      VERIFYSMSCODE: "/1/verifySmsCode",
      FUNCTIONS: "/1/functions",
      REQUESTPASSWORDRESET: "/1/requestPasswordReset",
      RESETPASSWORDBYSMSCODE: "/1/resetPasswordBySmsCode",
      UPDATEUSERPASSWORD: "/1/updateUserPassword",
      PUSH: "/1/push",
      FILES: "/2/files",
      FILESCHECK: "/1/wechatApp/checkImg",
      DELFILES: "/2/cdnBatchDelete",
      TIMESTAMP: "/1/timestamp",
      LOGIN: "/1/login",
      REGISTER: "/1/users",
      REQUEST_EMAIL_VERIFY: "/1/requestEmailVerify",
      USERS: "/1/users",
      USERSV1: "/1/usersv1",
      PAY: "/1/pay",
      WECHAT_APP: "/1/wechatAppv1/",
      BATCH: "/1/batch",
      CHECK_MSG: "/1/wechatApp/checkMsg",
      DECRYPTION: "/1/wechatApp/decryptionv1",
      MEDIACHECKASYNC: "/1/wechatApp/asyncCheckWechatMedia",
      QUERY: "/1/classes"
    };
    module.exports = {
      host: HOST,
      secretKey: SECRET_KEY,
      securityCode: SECURITY_CODE,
      applicationMasterKey: APPLICATION_MASTER_KEY,
      parameters: PARAMETERS,
      version: VERSION,
      serverVersion: 10,
      deBug: false,
      type: TYPE
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/config.dev.js
var require_config_dev = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/config.dev.js"(exports, module) {
    var HOST = "https://api.bmobcloud.com";
    var APPLICATION_ID = "";
    var APPLICATION_KEY = "";
    var VERSION = 1;
    var TYPE = 1;
    var PARAMETERS = {
      GENERATECODE: "/1/wechatApp/qr/generatecode",
      GETACCESSTOKEN: "/1/wechatApp/getAccessToken",
      SENDWEAPPMESSAGE: "/1/wechatApp/SendWeAppMessage",
      NOTIFYMSG: "/1/wechatApp/notifyMsg",
      REFUND: "/1/pay/refund",
      REQUESTSMSCODE: "/1/requestSmsCode",
      VERIFYSMSCODE: "/1/verifySmsCode",
      FUNCTIONS: "/1/functions",
      REQUESTPASSWORDRESET: "/1/requestPasswordReset",
      RESETPASSWORDBYSMSCODE: "/1/resetPasswordBySmsCode",
      UPDATEUSERPASSWORD: "/1/updateUserPassword",
      PUSH: "/1/push",
      FILES: "/2/files",
      FILESCHECK: "/1/wechatApp/checkImg",
      DELFILES: "/2/cdnBatchDelete",
      TIMESTAMP: "/1/timestamp",
      LOGIN: "/1/login",
      REGISTER: "/1/users",
      REQUEST_EMAIL_VERIFY: "/1/requestEmailVerify",
      USERS: "/1/users",
      USERSV1: "/1/usersv1",
      PAY: "/1/pay",
      WECHAT_APP: "/1/wechatAppv1/",
      BATCH: "/1/batch",
      CHECK_MSG: "/1/wechatApp/checkMsg",
      DECRYPTION: "/1/wechatApp/decryptionv1",
      MEDIACHECKASYNC: "/1/wechatApp/asyncCheckWechatMedia",
      QUERY: "/1/classes"
    };
    module.exports = {
      host: HOST,
      applicationId: APPLICATION_ID,
      applicationKey: APPLICATION_KEY,
      parameters: PARAMETERS,
      version: VERSION,
      serverVersion: 10,
      deBug: false,
      type: TYPE
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/utils.js
var require_utils = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/utils.js"(exports, module) {
    var config;
    config = require_config();
    var getConfig = (d = false) => {
      if (d === true) {
        config.host = require_config_dev().host;
      }
      return config;
    };
    var getAppType = () => {
      const config2 = getConfig();
      let type;
      if (typeof wx !== "undefined") {
        type = "wx";
      }
      if (typeof window !== "undefined" && typeof type !== "string") {
        type = "h5";
      }
      if (typeof process !== "undefined" && typeof type !== "string") {
        type = "nodejs";
      }
      if (config2.type === 3 && typeof type !== "string") {
        type = "hap";
      }
      return type;
    };
    var randomString = () => {
      let chars = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"];
      let nums = "";
      for (let i = 0; i < 16; i++) {
        let id = parseInt(Math.random() * 61);
        nums += chars[id];
      }
      return nums;
    };
    module.exports = { randomString, getConfig, getAppType };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/bmob.js
var require_bmob = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/bmob.js"(exports, module) {
    var utils = require_utils();
    var Bmob = global.Bmob || {};
    Bmob.utils = utils;
    Bmob._config = utils.getConfig();
    Bmob.initialize = (secretKey, securityCode, masterKey) => {
      if (securityCode.length > 6) {
        console.warn(`Bmob\u521D\u59CB\u5316\u5931\u8D25\uFF0C2.0\u4EE5\u4E0A\u7248\u672CSDK\u8BF7\u4F7F\u7528API\u5B89\u5168\u7801\u521D\u59CB\u5316\uFF0C\u6587\u6863\u5730\u5740\uFF1Ahttps://bmob.github.io/hydrogen-js-sdk/#/?id=\u521D\u59CB\u5316`);
      }
      Bmob._config.secretKey = secretKey;
      Bmob._config.securityCode = securityCode;
      Bmob._config.applicationMasterKey = masterKey;
    };
    Bmob.domain = (url) => {
      Bmob._config.host = url;
    };
    Bmob.debug = (d) => {
      Bmob._config.deBug = d;
      Bmob._config = utils.getConfig(d);
    };
    module.exports = Bmob;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/dataType.js
var require_dataType = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/dataType.js"(exports, module) {
    var isObject = (targe) => Object.prototype.toString.call(targe) === "[object Object]";
    var isNumber = (targe) => Object.prototype.toString.call(targe) === "[object Number]";
    var isString = (targe) => Object.prototype.toString.call(targe) === "[object String]";
    var isUndefined = (targe) => Object.prototype.toString.call(targe) === "[object Undefined]";
    var isBoolean = (targe) => Object.prototype.toString.call(targe) === "[object Boolean]";
    var isArray = (targe) => Object.prototype.toString.call(targe) === "[object Array]";
    var isFunction = (targe) => Object.prototype.toString.call(targe) === "[object Function]";
    module.exports = {
      isObject,
      isNumber,
      isString,
      isUndefined,
      isBoolean,
      isArray,
      isFunction
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/error.js
var require_error = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/error.js"(exports, module) {
    var error = class {
      constructor(code, msg) {
        let error2 = new Error();
        error2.code = code;
        error2.message = msg ? `Bmob.Error:{code:${code}, message:${msg}}` : `Bmob.Error:{code:${code}, message:${this.errorMsg(code)}}`;
        return error2;
      }
      errorMsg(code) {
        switch (code) {
          case 415:
            return "incorrect parameter type.";
          case 416:
            return "Parameter is null.";
          case 417:
            return "There is no upload content.";
          case 418:
            return "Log in failure.";
          case 419:
            return "Bmob.GeoPoint location error.";
          default:
            return "unknown error";
        }
      }
    };
    module.exports = error;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/pointer.js
var require_pointer = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/pointer.js"(exports, module) {
    var { isString } = require_dataType();
    var Error2 = require_error();
    var pointer = class Pointer {
      constructor(tableName) {
        if (!isString(tableName)) {
          throw new Error2(415);
        }
        this.tableName = tableName;
      }
      set(objectId) {
        if (!isString(objectId)) {
          throw new Error2(415);
        }
        return { "__type": "Pointer", "className": this.tableName, "objectId": objectId };
      }
    };
    module.exports = pointer;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/relation.js
var require_relation = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/relation.js"(exports, module) {
    var { isString, isArray } = require_dataType();
    var Error2 = require_error();
    var relation = class Relation {
      constructor(tableName) {
        if (!isString(tableName)) {
          throw new Error2(415);
        }
        this.tableName = tableName;
      }
      add(parmas) {
        return operation.call(this, parmas, "AddRelation");
      }
      remove(parmas) {
        return operation.call(this, parmas, "RemoveRelation");
      }
    };
    function operation(parmas, op) {
      if (isString(parmas)) {
        return {
          "__op": op,
          "objects": [
            {
              "__type": "Pointer",
              "className": this.tableName,
              "objectId": parmas
            }
          ]
        };
      } else if (isArray(parmas)) {
        const data = [];
        parmas.map((item) => {
          if (!isString(item)) {
            throw new Error2(415);
          }
          data.push({ "__type": "Pointer", "className": this.tableName, "objectId": item });
        });
        return { "__op": op, "objects": data };
      } else {
        throw new Error2(415);
      }
    }
    module.exports = relation;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/modules/is-buffer/index.js
var require_is_buffer = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/modules/is-buffer/index.js"(exports, module) {
    module.exports = function(obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
    };
    function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
    }
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer(obj.slice(0, 0));
    }
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind();
    var isBuffer = require_is_buffer();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.replace(/^\s*/, "").replace(/\s*$/, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (typeof result[key] === "object" && typeof val === "object") {
          result[key] = merge(result[key], val);
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/enhanceError.js"(exports, module) {
    "use strict";
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      return error;
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/createError.js"(exports, module) {
    "use strict";
    var enhanceError = require_enhanceError();
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var createError = require_createError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          "Request failed with status code " + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    function encode(val) {
      return encodeURIComponent(val).replace(/%40/gi, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement("a");
      var originURL;
      function resolveURL(url) {
        var href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }() : function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }();
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/btoa.js
var require_btoa = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/btoa.js"(exports, module) {
    "use strict";
    var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    function E() {
      this.message = "String contains an invalid character";
    }
    E.prototype = new Error();
    E.prototype.code = 5;
    E.prototype.name = "InvalidCharacterError";
    function btoa(input) {
      var str = String(input);
      var output = "";
      for (var block, charCode, idx = 0, map = chars; str.charAt(idx | 0) || (map = "=", idx % 1); output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
        charCode = str.charCodeAt(idx += 3 / 4);
        if (charCode > 255) {
          throw new E();
        }
        block = block << 8 | charCode;
      }
      return output;
    }
    module.exports = btoa;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read(name) {
          var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }() : function nonStandardBrowserEnv() {
      return {
        write: function write() {
        },
        read: function read() {
          return null;
        },
        remove: function remove() {
        }
      };
    }();
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var settle = require_settle();
    var buildURL = require_buildURL();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var btoa = typeof window !== "undefined" && window.btoa && window.btoa.bind(window) || require_btoa();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        var loadEvent = "onreadystatechange";
        var xDomain = false;
        if (typeof window !== "undefined" && window.XDomainRequest && !("withCredentials" in request) && !isURLSameOrigin(config.url)) {
          request = new window.XDomainRequest();
          loadEvent = "onload";
          xDomain = true;
          request.onprogress = function handleProgress() {
          };
          request.ontimeout = function handleTimeout() {
          };
        }
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password || "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        request[loadEvent] = function handleLoad() {
          if (!request || request.readyState !== 4 && !xDomain) {
            return;
          }
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !config.responseType || config.responseType === "text" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status === 1223 ? 204 : request.status,
            statusText: request.status === 1223 ? "No Content" : request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(resolve, reject, response);
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          reject(createError(
            "timeout of " + config.timeout + "ms exceeded",
            config,
            "ECONNABORTED",
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var cookies = require_cookies();
          var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (config.withCredentials) {
          request.withCredentials = true;
        }
        if (config.responseType) {
          try {
            request.responseType = config.responseType;
          } catch (e2) {
            if (config.responseType !== "json") {
              throw e2;
            }
          }
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken) {
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }
            request.abort();
            reject(cancel);
            request = null;
          });
        }
        if (requestData === void 0) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/defaults.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var normalizeHeaderName = require_normalizeHeaderName();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined") {
        adapter = require_xhr();
      }
      return adapter;
    }
    var defaults = {
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data)) {
          setContentTypeIfUnset(headers, "application/json;charset=utf-8");
          return JSON.stringify(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        if (typeof data === "string") {
          try {
            data = JSON.parse(data);
          } catch (e2) {
          }
        }
        return data;
      }],
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };
    defaults.headers = {
      common: {
        "Accept": "application/json, text/plain, */*"
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected) {
      this.handlers.push({
        fulfilled,
        rejected
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    module.exports = function transformData(data, headers, fns) {
      utils.forEach(fns, function transform(fn) {
        data = fn(data, headers);
      });
      return data;
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      if (config.baseURL && !isAbsoluteURL(config.url)) {
        config.url = combineURLs(config.baseURL, config.url);
      }
      config.headers = config.headers || {};
      config.data = transformData(
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers || {}
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData(
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData(
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var defaults = require_defaults();
    var utils = require_utils2();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = utils.merge({
          url: arguments[0]
        }, arguments[1]);
      }
      config = utils.merge(defaults, { method: "get" }, this.defaults, config);
      config.method = config.method.toLowerCase();
      var chain = [dispatchRequest, void 0];
      var promise = Promise.resolve(config);
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
      });
      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }
      return promise;
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(utils.merge(config || {}, {
          method,
          url
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(utils.merge(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module.exports = Axios;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/cancel/Cancel.js"(exports, module) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var bind = require_bind();
    var Axios = require_Axios();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.create = function create(instanceConfig) {
      return createInstance(utils.merge(defaults, instanceConfig));
    };
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    module.exports = axios;
    module.exports.default = axios;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/utf8md5.js
var require_utf8md5 = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/utf8md5.js"(exports, module) {
    function safeAdd(x, y) {
      var lsw = (x & 65535) + (y & 65535);
      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 65535;
    }
    function rol(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    function cmn(q, a, b, x, s, t) {
      return safeAdd(rol(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }
    function ff(a, b, c, d, x, s, t) {
      return cmn(b & c | ~b & d, a, b, x, s, t);
    }
    function gg(a, b, c, d, x, s, t) {
      return cmn(b & d | c & ~d, a, b, x, s, t);
    }
    function hh(a, b, c, d, x, s, t) {
      return cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function ii(a, b, c, d, x, s, t) {
      return cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    function coreMD5(x) {
      var a = 1732584193;
      var b = -271733879;
      var c = -1732584194;
      var d = 271733878;
      for (var i = 0; i < x.length; i += 16) {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;
        a = ff(a, b, c, d, x[i + 0], 7, -680876936);
        d = ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = ff(c, d, a, b, x[i + 10], 17, -42063);
        b = ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = gg(b, c, d, a, x[i + 0], 20, -373897302);
        a = gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = hh(a, b, c, d, x[i + 5], 4, -378558);
        d = hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = hh(d, a, b, c, x[i + 0], 11, -358537222);
        c = hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = ii(a, b, c, d, x[i + 0], 6, -198630844);
        d = ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
      }
      return [a, b, c, d];
    }
    function binl2hex(binarray) {
      var hexTab = "0123456789abcdef";
      var str = "";
      for (var i = 0; i < binarray.length * 4; i++) {
        str += hexTab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 15) + hexTab.charAt(binarray[i >> 2] >> i % 4 * 8 & 15);
      }
      return str;
    }
    function str2binl(str) {
      var nblk = (str.length + 8 >> 6) + 1;
      var blks = new Array(nblk * 16);
      for (var ir = 0; ir < nblk * 16; ir++)
        blks[ir] = 0;
      for (var i = 0; i < str.length; i++) {
        blks[i >> 2] |= (str.charCodeAt(i) & 255) << i % 4 * 8;
      }
      blks[i >> 2] |= 128 << i % 4 * 8;
      blks[nblk * 16 - 2] = str.length * 8;
      return blks;
    }
    function stringToUint(s) {
      s = unescape(encodeURIComponent(s));
      var uintArray = [];
      for (var i = 0; i < s.length; i++)
        uintArray.push(s[i].charCodeAt(0));
      return new Uint8Array(uintArray);
    }
    function buf2binl(buffer) {
      if (typeof buffer === "string")
        buffer = stringToUint(buffer);
      var nblk = (buffer.length + 8 >> 6) + 1;
      var blks = new Array(nblk * 16);
      for (var ir = 0; ir < nblk * 16; ir++)
        blks[ir] = 0;
      for (var i = 0; i < buffer.length; i++) {
        blks[i >> 2] |= (buffer[i] & 255) << i % 4 * 8;
      }
      blks[i >> 2] |= 128 << i % 4 * 8;
      blks[nblk * 16 - 2] = buffer.length * 8;
      return blks;
    }
    function utf8MD5(str) {
      return binl2hex(coreMD5(buf2binl(str)));
    }
    function hexMD5(str) {
      return binl2hex(coreMD5(str2binl(str)));
    }
    module.exports = {
      hexMD5,
      utf8MD5
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/axiosRequest.js
var require_axiosRequest = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/axiosRequest.js"(exports, module) {
    var axios = require_axios();
    var Bmob = require_bmob();
    var md5 = require_utf8md5();
    var setHeader = (config, route, method, parma) => {
      let type = "wechatApp";
      if (Bmob.type === "nodejs") {
        type = "nodejs";
      }
      const t = Math.round(new Date().getTime() / 1e3);
      let body = method === "get" || method === "delete" ? "" : JSON.stringify(parma);
      const rand = Bmob.utils.randomString();
      const sign = md5.utf8MD5(route + t + config.securityCode + rand + body + config.serverVersion);
      let header = {
        "content-type": "application/json",
        "X-Bmob-SDK-Type": type,
        "X-Bmob-Safe-Sign": sign,
        "X-Bmob-Safe-Timestamp": t,
        "X-Bmob-Noncestr-Key": rand,
        "X-Bmob-SDK-Version": config.serverVersion,
        "X-Bmob-Secret-Key": config.secretKey
      };
      if (config.applicationMasterKey) {
        header["X-Bmob-Master-Key"] = config.applicationMasterKey;
      }
      return header;
    };
    var request = (route, method = "get", parma = {}) => {
      return new Promise((resolve, reject) => {
        if (void 0 === Bmob.User) {
          Bmob = require_bmob();
        }
        const header = setHeader(Bmob._config, route, method, parma);
        var current = Bmob.User.current();
        if (current) {
          header["X-Bmob-Session-Token"] = current.sessionToken;
        }
        const server = axios.create({
          baseURL: Bmob._config.host,
          headers: header,
          validateStatus: (status) => {
            return status < 500;
          }
        });
        const serverData = {
          url: route,
          method
        };
        if (serverData.method === "get") {
          serverData.params = parma;
        } else {
          serverData.data = parma;
        }
        if (Bmob._config.deBug === true) {
          console.log("host:", Bmob._config.host);
          console.log("parma:", parma);
        }
        server(serverData).then(({ data }) => {
          if (data.code && data.error || data.error) {
            reject(data);
          }
          resolve(data);
        }).catch((err) => {
          reject(err);
        });
      });
    };
    module.exports = request;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/wxRequest.js
var require_wxRequest = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/wxRequest.js"(exports, module) {
    var Bmob = require_bmob();
    var md5 = require_utf8md5();
    var sdkType = "wechatApp";
    if (typeof tt !== "undefined") {
      sdkType = "toutiao";
    } else if (typeof qq !== "undefined") {
      sdkType = "qqApp";
    }
    var setHeader = (config, route, method, parma) => {
      const t = Math.round(new Date().getTime() / 1e3);
      const rand = Bmob.utils.randomString();
      let body = method === "get" || method === "delete" ? "" : JSON.stringify(parma);
      const sign = md5.utf8MD5(route + t + config.securityCode + rand + body + config.serverVersion);
      let header = {
        "content-type": "application/json",
        "X-Bmob-SDK-Type": sdkType,
        "X-Bmob-Safe-Sign": sign,
        "X-Bmob-Safe-Timestamp": t,
        "X-Bmob-Noncestr-Key": rand,
        "X-Bmob-SDK-Version": config.serverVersion,
        "X-Bmob-Secret-Key": config.secretKey
      };
      if (config.applicationMasterKey) {
        header["X-Bmob-Master-Key"] = config.applicationMasterKey;
      }
      return header;
    };
    var request = (route, method = "get", parma = {}) => {
      return new Promise((resolve, reject) => {
        const header = setHeader(Bmob._config, route, method, parma);
        if (void 0 === Bmob.User) {
          Bmob = require_bmob();
        }
        let current = Bmob.User.current();
        if (current) {
          header["X-Bmob-Session-Token"] = current.sessionToken;
        }
        if (Bmob._config.deBug === true) {
          console.log("host:", Bmob._config.host);
          console.log("parma:", parma);
        }
        wx.request({
          url: Bmob._config.host + route,
          method,
          data: parma,
          header,
          success: (res) => {
            if (res.data.code && res.data.error || res.data.error) {
              reject(res.data);
            }
            resolve(res.data);
          },
          fail: (err) => {
            console.log(err);
            reject(err);
          }
        });
      });
    };
    module.exports = request;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/hapRequest.js
var require_hapRequest = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/hapRequest.js"(exports, module) {
    var Bmob = require_bmob();
    var md5 = require_utf8md5();
    var fetch = "xxrequire('@system.fetch')xx";
    var setHeader = (config, route, method, parma) => {
      const t = Math.round(new Date().getTime() / 1e3);
      const rand = Bmob.utils.randomString();
      let body = method === "get" || method === "delete" ? "" : JSON.stringify(parma);
      const sign = md5.utf8MD5(route + t + config.securityCode + rand + body + config.serverVersion);
      let header = {
        "content-type": "application/json",
        "X-Bmob-SDK-Type": "wechatApp",
        "X-Bmob-Safe-Sign": sign,
        "X-Bmob-Safe-Timestamp": t,
        "X-Bmob-Noncestr-Key": rand,
        "X-Bmob-SDK-Version": config.serverVersion,
        "X-Bmob-Secret-Key": config.secretKey
      };
      if (config.applicationMasterKey) {
        header["X-Bmob-Master-Key"] = config.applicationMasterKey;
      }
      return header;
    };
    var request = (route, method = "get", parma = {}) => {
      return new Promise((resolve, reject) => {
        const header = setHeader(Bmob._config, route, method, parma);
        if (void 0 === Bmob.User) {
          Bmob = require_bmob();
        }
        let current = Bmob.User.current();
        if (current) {
          header["X-Bmob-Session-Token"] = current.sessionToken;
        }
        if (typeof parma === "object") {
          parma = JSON.stringify(parma);
        }
        fetch.fetch({
          url: Bmob._config.host + route,
          header,
          method,
          data: parma,
          success: function(res) {
            const data = JSON.parse(res.data);
            if (data.code) {
              reject(data);
            }
            resolve(data);
          },
          fail: function(data, code) {
            console.log(`handling fail, code = ${code}`);
            reject(data);
          }
        });
      });
    };
    module.exports = request;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/request.js
var require_request = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/request.js"(exports, module) {
    var utils = require_utils();
    var request;
    var type = utils.getAppType();
    if (type === "h5") {
      request = require_axiosRequest();
    } else if (type === "wx") {
      request = require_wxRequest();
    } else if (type === "hap") {
      request = require_hapRequest();
    } else if (type === "nodejs") {
      request = require_axiosRequest();
    }
    module.exports = request;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/webstorage.js
var require_webstorage = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/webstorage.js"(exports, module) {
    var { isString } = require_dataType();
    var lt;
    if (typeof cc !== "undefined") {
      lt = cc.sys.localStorage;
    } else {
      lt = localStorage;
    }
    var storage = {
      save(key, value) {
        if (!isString(key) || !value) {
          throw new Error(415);
        }
        lt.setItem(key, JSON.stringify(value));
      },
      fetch(key) {
        if (!isString(key)) {
          throw new Error(415);
        }
        return JSON.parse(lt.getItem(key)) || null;
      },
      remove(key) {
        if (!isString(key)) {
          throw new Error(415);
        }
        lt.removeItem(key);
      },
      clear() {
        lt.clear();
      }
    };
    module.exports = storage;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/wxstorage.js
var require_wxstorage = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/wxstorage.js"(exports, module) {
    var { isString, isObject } = require_dataType();
    var storage = {
      save(key, value) {
        if (!isString(key) || !value) {
          throw new Error(415);
        }
        value = !isObject(value) ? value : JSON.stringify(value);
        return wx.setStorageSync(key, value);
      },
      fetch(key) {
        if (!isString(key)) {
          throw new Error(415);
        }
        return wx.getStorageSync(key) || null;
      },
      remove(key) {
        if (!isString(key)) {
          throw new Error(415);
        }
        return wx.removeStorageSync(key);
      },
      clear() {
        return wx.clearStorageSync();
      }
    };
    module.exports = storage;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/hapStorage.js
var require_hapStorage = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/hapStorage.js"(exports, module) {
    var { isString } = require_dataType();
    var storages = "xxrequire('@system.storage')xx";
    var storage = {
      save(key, value) {
        if (!isString(key) || !value) {
          throw new Error(415);
        }
        storages.set({
          key,
          value: JSON.stringify(value),
          success: function(data) {
            console.log("handling success");
            return data;
          },
          fail: function(data, code) {
            console.log(`handling fail, code = ${code}`);
          }
        });
      },
      fetch(key) {
        if (!isString(key)) {
          throw new Error(415);
        }
        return new Promise((resolve, reject) => {
          return storages.get({
            key,
            success: function(data) {
              resolve(data || null);
            },
            fail: function(data, code) {
              console.log(`handling fail, code = ${code}`);
              reject(data);
            }
          });
        });
      },
      remove(key) {
        if (!isString(key)) {
          throw new Error(415);
        }
        storages.delete({
          key,
          success: function(data) {
            console.log("handling success");
          },
          fail: function(data, code) {
            console.log(`handling fail, code = ${code}`);
          }
        });
      },
      clear() {
        storages.clear({
          success: function(data) {
            console.log("handling success");
          },
          fail: function(data, code) {
            console.log(`handling fail, code = ${code}`);
          }
        });
      }
    };
    module.exports = storage;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/nodestorage.js
var require_nodestorage = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/nodestorage.js"(exports, module) {
    var storage = {
      save(key, value) {
      },
      fetch(key) {
        return null;
      },
      remove(key) {
      },
      clear() {
      }
    };
    module.exports = storage;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/storage.js
var require_storage = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/storage.js"(exports, module) {
    var utils = require_utils();
    var storage;
    var type = utils.getAppType();
    if (type === "h5") {
      storage = require_webstorage();
    } else if (type === "wx") {
      storage = require_wxstorage();
    } else if (type === "hap") {
      storage = require_hapStorage();
    } else if (type === "nodejs") {
      storage = require_nodestorage();
    }
    module.exports = storage;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/query.js
var require_query = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/query.js"(exports, module) {
    var Bmob = require_bmob();
    var request = require_request();
    var {
      isObject,
      isString,
      isNumber,
      isUndefined,
      isArray
    } = require_dataType();
    var Error2 = require_error();
    var storage = require_storage();
    var query = class query {
      constructor(parmas) {
        this.tableName = `${Bmob._config.parameters.QUERY}/${parmas}`;
        this.className = parmas;
        this.init();
        this.addArray = {};
        this.setData = {};
      }
      init() {
        this.queryData = {};
        this.location = {};
        this.andData = {};
        this.orData = {};
        this.stat = {};
        this.limitNum = 100;
        this.skipNum = 0;
        this.includes = "";
        this.queryReilation = {};
        this.orders = null;
        this.keys = null;
      }
      get(ObjectId) {
        if (!isString(ObjectId)) {
          throw new Error2(415);
        }
        let oneData = {};
        const incrementData = {};
        const unsetData = {};
        const addArray = {};
        const add = (key, val) => {
          if (!isString(key) || !isArray(val)) {
            throw new Error2(415);
          }
          addArray[key] = {
            __op: "Add",
            objects: val
          };
        };
        const addUnique = (key, val) => {
          if (!isString(key) || !isArray(val)) {
            throw new Error2(415);
          }
          addArray[key] = {
            __op: "AddUnique",
            objects: val
          };
        };
        const remove = (key, val) => {
          if (!isString(key) || !isArray(val)) {
            throw new Error2(415);
          }
          addArray[key] = {
            __op: "Remove",
            objects: val
          };
        };
        const increment = (key, val = 1) => {
          if (!isString(key) || !isNumber(val)) {
            throw new Error2(415);
          }
          incrementData[key] = {
            __op: "Increment",
            amount: val
          };
        };
        const unset = (key) => {
          if (!isString(ObjectId)) {
            throw new Error2(415);
          }
          unsetData[key] = {
            __op: "Delete"
          };
        };
        const set = (key, val) => {
          if (!isString(key) || isUndefined(val)) {
            throw new Error2(415);
          }
          const { filename, cdn, url } = val;
          if (!isUndefined(filename) && !isUndefined(cdn) && !isUndefined(url)) {
            oneData[key] = {
              __type: "File",
              group: cdn,
              filename,
              url
            };
          } else {
            oneData[key] = val;
          }
        };
        const save = () => {
          const saveData = Object.assign(
            unsetData,
            oneData,
            incrementData,
            addArray
          );
          if (this.className === "_User") {
            return new Promise((resolve, reject) => {
              request(`${this.tableName}/${ObjectId}`, "put", saveData).then((results) => {
                const current = this.current();
                let newStorage = Object.assign(current, saveData);
                storage.save("bmob", newStorage);
                resolve(results);
              }).catch((err) => {
                reject(err);
              });
            });
          }
          return request(`${this.tableName}/${ObjectId}`, "put", saveData);
        };
        const associated = {};
        if (this.includes !== "") {
          associated.include = this.includes;
        }
        return new Promise((resolve, reject) => {
          request(`${this.tableName}/${ObjectId}`, "get", associated).then((results) => {
            Object.defineProperty(results, "set", { value: set });
            Object.defineProperty(results, "unset", { value: unset });
            Object.defineProperty(results, "save", { value: save });
            Object.defineProperty(results, "increment", { value: increment });
            Object.defineProperty(results, "add", { value: add });
            Object.defineProperty(results, "remove", { value: remove });
            Object.defineProperty(results, "addUnique", { value: addUnique });
            Object.defineProperty(results, "destroy", {
              value: () => this.destroy(ObjectId)
            });
            resolve(results);
          }).catch((err) => {
            reject(err);
          });
        });
      }
      destroy(ObjectId) {
        if (!isString(ObjectId)) {
          throw new Error2(415);
        }
        return request(`${this.tableName}/${ObjectId}`, "delete");
      }
      set(key, val) {
        if (!isString(key) || isUndefined(val)) {
          throw new Error2(415, `${key}\u5B57\u6BB5\u53C2\u6570,\u7C7B\u578B\u4E0D\u6B63\u786E`);
        }
        const { filename, cdn, url } = val;
        if (!isUndefined(filename) && !isUndefined(cdn) && !isUndefined(url)) {
          this.setData[key] = {
            __type: "File",
            group: cdn,
            filename,
            url
          };
        } else {
          this.setData[key] = val;
        }
      }
      add(key, val) {
        if (!isString(key) || !isArray(val)) {
          throw new Error2(415);
        }
        this.addArray[key] = {
          __op: "Add",
          objects: val
        };
      }
      addUnique(key, val) {
        if (!isString(key) || !isArray(val)) {
          throw new Error2(415);
        }
        this.addArray[key] = {
          __op: "AddUnique",
          objects: val
        };
      }
      current() {
        if (Bmob.type !== "hap") {
          const data = storage.fetch("bmob");
          return typeof data === "object" ? data : JSON.parse(data);
        } else {
          return new Promise((resolve, reject) => {
            return storage.fetch("bmob").then((res) => {
              resolve(res);
            }).catch((err) => {
              reject(err);
            });
          });
        }
      }
      updateStorage(id) {
        if (!isString(id)) {
          throw new Error2(415);
        }
        return new Promise((resolve, reject) => {
          const current = this.current();
          if (!current) {
            throw new Error2(415);
          }
          this.get(id).then((res) => {
            let newStorage = Object.assign(current, res);
            storage.save("bmob", newStorage);
            resolve(res);
          }).catch((err) => {
            console.log(err);
            reject(err);
          });
        });
      }
      save(parmas = {}) {
        if (!isObject(parmas)) {
          throw new Error2(415);
        }
        let method = this.setData.id ? "PUT" : "POST";
        let objectId = this.setData.id ? this.setData.id : "";
        delete this.setData.id;
        let saveData = Object.assign(parmas, this.setData, this.addArray);
        return new Promise((resolve, reject) => {
          request(`${this.tableName}/${objectId}`, method, saveData).then((results) => {
            this.addArray = {};
            this.setData = {};
            if (this.className === "_User") {
              const current = this.current();
              let newStorage = Object.assign(current, saveData);
              storage.save("bmob", newStorage);
            }
            resolve(results);
          }).catch((err) => {
            reject(err);
          });
        });
      }
      saveAll(items) {
        if (!isArray(items)) {
          throw new Error2(415);
        }
        if (items.length < 1) {
          throw new Error2(416);
        }
        let id;
        let p;
        let m = "put";
        let key = [];
        items.map((item) => {
          id = `/${item.objectId}`;
          if (id === "/undefined") {
            id = "";
            m = "post";
          }
          p = {
            method: m,
            path: `${this.tableName}${id}`,
            body: item.setData
          };
          key.push(p);
          return item;
        });
        let params = {
          requests: key
        };
        let route = Bmob._config.parameters.BATCH;
        return request(route, "POST", params);
      }
      withinKilometers(field, { latitude, longitude }, km = 100) {
        let newData = {};
        newData[field] = {
          $nearSphere: {
            __type: "GeoPoint",
            latitude,
            longitude
          },
          $maxDistanceInKilometers: km
        };
        this.location = newData;
        return newData;
      }
      withinGeoBox(field, { latitude, longitude }, s) {
        let newData = {};
        newData[field] = {
          $within: {
            $box: [
              {
                __type: "GeoPoint",
                latitude,
                longitude
              },
              {
                __type: "GeoPoint",
                latitude: s.latitude,
                longitude: s.longitude
              }
            ]
          }
        };
        this.location = newData;
        return newData;
      }
      statTo(key, val) {
        if (!isString(key)) {
          throw new Error2(415);
        }
        this.stat[key] = val;
        return this.stat;
      }
      equalTo(key, operator, val) {
        if (!isString(key)) {
          throw new Error2(415);
        }
        const judge = (key2, operator2, val2) => {
          let data = {};
          let value = null;
          if (key2 === "createdAt" || key2 === "updateAt") {
            value = {
              __type: "Date",
              iso: val2
            };
          } else {
            value = val2;
          }
          switch (operator2) {
            case "==":
              data[key2] = value;
              break;
            case "===":
              data[key2] = value;
              break;
            case "!=":
              data[key2] = {
                $ne: value
              };
              break;
            case "<":
              data[key2] = {
                $lt: value
              };
              break;
            case "<=":
              data[key2] = {
                $lte: value
              };
              break;
            case ">":
              data[key2] = {
                $gt: value
              };
              break;
            case ">=":
              data[key2] = {
                $gte: value
              };
              break;
            default:
              throw new Error2(415);
          }
          return data;
        };
        const newData = judge(key, operator, val);
        if (Object.keys(this.queryData).length) {
          if (!isUndefined(this.queryData.$and)) {
            this.queryData.$and.push(newData);
          } else {
            this.queryData = {
              $and: [this.queryData, newData]
            };
          }
        } else {
          this.queryData = newData;
        }
        return newData;
      }
      containedIn(key, val) {
        if (!isString(key) || !isArray(val)) {
          throw new Error2(415);
        }
        return queryData.call(this, key, "$in", val);
      }
      notContainedIn(key, val) {
        if (!isString(key) || !isArray(val)) {
          throw new Error2(415);
        }
        return queryData.call(this, key, "$nin", val);
      }
      exists(key) {
        if (!isString(key)) {
          throw new Error2(415);
        }
        return queryData.call(this, key, "$exists", true);
      }
      doesNotExist(key) {
        if (!isString(key)) {
          throw new Error2(415);
        }
        return queryData.call(this, key, "$exists", false);
      }
      or(...querys) {
        querys.map((item, i) => {
          if (!isObject(item)) {
            throw new Error2(415);
          }
        });
        const queryData2 = this.queryData.$and;
        if (!isUndefined(queryData2)) {
          for (let i = 0; i < queryData2.length; i++) {
            for (let k = 0; k < querys.length; k++) {
              if (JSON.stringify(queryData2[i]) === JSON.stringify(querys[k])) {
                this.queryData.$and.splice(i, 1);
              }
            }
          }
          if (!queryData2.length) {
            delete this.queryData.$and;
          }
        }
        this.orData = {
          $or: querys
        };
      }
      and(...querys) {
        querys.map((item, i) => {
          if (!isObject(item)) {
            throw new Error2(415);
          }
        });
        this.andData = {
          $and: querys
        };
      }
      limit(parmas) {
        if (!isNumber(parmas)) {
          throw new Error2(415);
        }
        if (parmas > 1e3) {
          parmas = 1e3;
        }
        this.limitNum = parmas;
      }
      skip(parmas) {
        if (!isNumber(parmas)) {
          throw new Error2(415);
        }
        this.skipNum = parmas;
      }
      order(...key) {
        key.map((item) => {
          if (!isString(item)) {
            throw new Error2(415);
          }
        });
        this.orders = key.join(",");
      }
      include(...key) {
        key.map((item) => {
          if (!isString(item)) {
            throw new Error2(415);
          }
        });
        this.includes = key.join(",");
      }
      select(...key) {
        key.map((item) => {
          if (!isString(item)) {
            throw new Error2(415);
          }
        });
        this.keys = key.join(",");
      }
      field(key, objectId) {
        if (!isString(key) || !isString(objectId)) {
          throw new Error2(415);
        }
        this.queryReilation.where = {
          $relatedTo: {
            object: {
              __type: "Pointer",
              className: this.className,
              objectId
            },
            key
          }
        };
      }
      relation(tableName) {
        if (!isString(tableName)) {
          throw new Error2(415);
        }
        if (tableName === "_User") {
          tableName = "users";
        } else {
          tableName = `classes/${tableName}`;
        }
        this.queryReilation.count = 1;
        let parmas = Object.assign(this.getParams(), this.queryReilation);
        return new Promise((resolve, reject) => {
          request(`/1/${tableName}`, "get", parmas).then((res) => {
            resolve(res);
          }).catch((err) => {
            reject(err);
          });
        });
      }
      getParams() {
        let parmas = {};
        if (Object.keys(this.queryData).length) {
          parmas.where = this.queryData;
        }
        if (Object.keys(this.location).length) {
          parmas.where = Object.assign(this.location, this.queryData);
        }
        if (Object.keys(this.andData).length) {
          parmas.where = Object.assign(this.andData, this.queryData);
        }
        if (Object.keys(this.orData).length) {
          parmas.where = Object.assign(this.orData, this.queryData);
        }
        parmas.limit = this.limitNum;
        parmas.skip = this.skipNum;
        parmas.include = this.includes;
        parmas.order = this.orders;
        parmas.keys = this.keys;
        if (Object.keys(this.stat).length) {
          parmas = Object.assign(parmas, this.stat);
        }
        for (const key in parmas) {
          if (parmas.hasOwnProperty(key) && parmas[key] === null || parmas[key] === 0 || parmas[key] === "") {
            delete parmas[key];
          }
        }
        return parmas;
      }
      find() {
        let oneData = {};
        let items = {};
        const parmas = this.getParams();
        const set = (key, val) => {
          if (!key || isUndefined(val)) {
            throw new Error2(415);
          }
          oneData[key] = val;
        };
        const batch = (method = "updata") => {
          console.log(method);
          if (items.length < 1) {
            throw new Error2(416);
          }
          let id;
          let p;
          let m = "put";
          let key = [];
          items.map((item) => {
            id = `/${item.objectId}`;
            if (id === "/undefined") {
              id = "";
              m = "post";
            }
            p = {
              method: m,
              path: `${this.tableName}${id}`,
              body: oneData
            };
            if (method === "delete") {
              p = {
                method: "DELETE",
                path: `${this.tableName}${id}`
              };
            }
            key.push(p);
            return item;
          });
          let params = {
            requests: key
          };
          let route = Bmob._config.parameters.BATCH;
          return request(route, "POST", params);
        };
        return new Promise((resolve, reject) => {
          request(`${this.tableName}`, "get", parmas).then((res) => {
            let results = res.results;
            if (parmas.hasOwnProperty("count")) {
              results = res;
            }
            this.init();
            Object.defineProperty(results, "set", { value: set });
            Object.defineProperty(results, "saveAll", {
              value: () => {
                return batch();
              }
            });
            Object.defineProperty(results, "destroyAll", {
              value: () => {
                return batch("delete");
              }
            });
            items = results;
            resolve(results);
          }).catch((err) => {
            reject(err);
          });
        });
      }
      count(limit = 0) {
        const parmas = {};
        if (Object.keys(this.queryData).length) {
          parmas.where = this.queryData;
        }
        if (Object.keys(this.andData).length) {
          parmas.where = Object.assign(this.andData, this.queryData);
        }
        if (Object.keys(this.orData).length) {
          parmas.where = Object.assign(this.orData, this.queryData);
        }
        parmas.count = 1;
        parmas.limit = limit;
        return new Promise((resolve, reject) => {
          request(this.tableName, "get", parmas).then(({ count }) => {
            resolve(count);
          }).catch((err) => {
            reject(err);
          });
        });
      }
    };
    function queryData(key, operator, val) {
      let parent = {};
      let child = {};
      child[operator] = val;
      parent[key] = child;
      let newData = parent;
      if (Object.keys(this.queryData).length) {
        if (!isUndefined(this.queryData.$and)) {
          this.queryData.$and.push(newData);
        } else {
          this.queryData = {
            $and: [this.queryData, newData]
          };
        }
      } else {
        this.queryData = newData;
      }
      return newData;
    }
    module.exports = query;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/user.js
var require_user = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/user.js"(exports, module) {
    var request = require_request();
    var storage = require_storage();
    var query = require_query();
    var Bmob = require_bmob();
    var Error2 = require_error();
    var { isObject, isString, isNumber } = require_dataType();
    var user = class user extends query {
      constructor() {
        const tableName = "_User";
        super(tableName);
      }
      set(key, val = "") {
        if (isString(key)) {
          this.setData[key] = val;
        }
      }
      requestEmailVerify(email) {
        if (!isString(email)) {
          throw new Error2(415);
        }
        this.setData = Object.assign({}, { email });
        console.log(this.setData);
        const route = Bmob._config.parameters.REQUEST_EMAIL_VERIFY;
        return request(route, "post", this.setData);
      }
      register(parma) {
        if (!isObject(parma)) {
          throw new Error2(415);
        }
        this.setData = Object.assign({}, parma);
        const route = Bmob._config.parameters.REGISTER;
        return request(route, "post", this.setData);
      }
      login(username, password) {
        if (!isString(username) || !isString(password)) {
          throw new Error2(415);
        }
        this.setData = Object.assign({}, { username, password });
        const route = Bmob._config.parameters.LOGIN;
        return new Promise((resolve, reject) => {
          request(route, "get", this.setData).then((res) => {
            storage.save("bmob", res);
            resolve(res);
          }).catch((err) => {
            reject(err);
          });
        });
      }
      logout() {
        storage.clear();
      }
      users() {
        const route = Bmob._config.parameters.USERS;
        return request(route, "get");
      }
      decryption(e2) {
        let self2 = this;
        return new Promise((resolve, reject) => {
          const i = e2.iv ? e2.iv : e2.detail.iv;
          const d = e2.encryptedData ? e2.encryptedData : e2.detail.encryptedData;
          const current = self2.current();
          let s;
          if (typeof tt !== "undefined") {
            s = current.authData.toutiao.session_key;
          } else if (typeof qq !== "undefined") {
            s = current.authData.qqapp.session_key;
          } else {
            s = current.authData.weapp.session_key;
          }
          const data = {
            sessionKey: s,
            encryptedData: d,
            iv: i
          };
          const route = Bmob._config.parameters.DECRYPTION;
          request(route, "POST", data).then((res) => {
            resolve(res);
          }).catch((err) => {
            reject(err);
          });
        });
      }
      signOrLoginByMobilePhone(mobilePhoneNumber, smsCode) {
        if (!isNumber(mobilePhoneNumber) || !isNumber(smsCode)) {
          throw new Error2(415);
        }
        this.setData = Object.assign({}, { mobilePhoneNumber, smsCode });
        const route = Bmob._config.parameters.LOGIN;
        return request(route, "get", this.setData);
      }
      requestOpenId(code, a = "") {
        const route = Bmob._config.parameters.WECHAT_APP;
        return request(route + code, "POST", { anonymous_code: a });
      }
      linkWith(data) {
        let authData = { authData: data };
        const route = Bmob._config.parameters.USERSV1;
        return request(route, "POST", authData);
      }
      loginWithWeapp(code, a = "", str) {
        return new Promise((resolve, reject) => {
          this.requestOpenId(code, a).then((res) => {
            let w = { weapp: res };
            if (typeof tt !== "undefined") {
              delete res.error;
              w = { toutiao: res };
            }
            if (typeof qq !== "undefined") {
              delete res.errcode;
              delete res.errmsg;
              w = { qqapp: res };
            }
            if (str === "openid") {
              resolve(res);
            } else {
              const result = this.linkWith(w);
              resolve(result);
            }
          }).catch((err) => {
            reject(err);
          });
        });
      }
      upInfo(userInfo) {
        if (!isObject(userInfo)) {
          throw new Error2(415);
        }
        return new Promise((resolve, reject) => {
          let nickName = userInfo.nickName;
          let avatarUrl = userInfo.avatarUrl;
          let currentUser = this.current();
          if (!currentUser) {
            throw new Error2(415);
          }
          let openid = storage.fetch("openid");
          this.get(currentUser.objectId).then((res) => {
            res.set("nickName", nickName);
            res.set("userPic", avatarUrl);
            res.set("openid", openid);
            res.save().then((result) => {
              resolve(result);
            }).catch((err) => {
              console.log(err);
              reject(err);
            });
          }).catch((err) => {
            console.log(err);
            reject(err);
          });
        });
      }
      openId() {
        this.auth("openid");
      }
      auth(str = "") {
        let that = this;
        return new Promise((resolve, reject) => {
          const login = () => {
            wx.login({
              success: (res) => {
                let anonymousCode = "";
                if (typeof tt !== "undefined") {
                  anonymousCode = res.anonymousCode;
                }
                that.loginWithWeapp(res.code, anonymousCode, str).then(
                  (user2) => {
                    if (user2.error) {
                      throw new Error2(415);
                    }
                    let openid;
                    if (typeof tt !== "undefined") {
                      openid = user2.authData.toutiao.openid;
                    } else if (typeof qq !== "undefined") {
                      openid = user2.authData.qqapp.openid;
                    } else {
                      openid = user2.authData.weapp.openid;
                    }
                    storage.save("openid", openid);
                    storage.save("bmob", user2);
                    resolve(user2);
                  },
                  function(err) {
                    reject(err);
                  }
                );
              }
            });
          };
          wx.checkSession({
            success: function() {
              let c = that.current();
              if (c === null) {
                const e2 = "\u767B\u9646\u9519\u8BEF\uFF0C\u8BF7\u5728Bmob\u540E\u53F0\u586B\u5199\u5C0F\u7A0B\u5E8FAppSecret\u3002";
                reject(e2);
              }
              resolve(c);
              login();
            },
            fail: () => {
              login();
            }
          });
        });
      }
    };
    module.exports = user;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/file.js
var require_file = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/file.js"(exports, module) {
    var request = require_request();
    var Bmob = require_bmob();
    var Error2 = require_error();
    var utils = require_utils();
    var md5 = require_utf8md5();
    var requestHap = "xxrequire('@system.request')xx";
    var { isString, isArray } = require_dataType();
    var list = [];
    var file = class {
      constructor(name, parma) {
        if (name && parma) {
          if (!isString(name)) {
            throw new Error2(415);
          }
          list.push({
            name,
            route: `${Bmob._config.parameters.FILES}/${name}`,
            data: parma
          });
        }
      }
      fileUpload(p = "") {
        let that = this;
        return new Promise((resolve, reject) => {
          if (void 0 === Bmob.User) {
            Bmob = require_bmob();
          }
          let sessionToken = "bmob";
          let current = Bmob.User.current();
          if (current) {
            sessionToken = current.sessionToken;
          }
          const data = [];
          const t = Math.round(new Date().getTime() / 1e3);
          const rand = Bmob.utils.randomString();
          let route = list[0].route;
          if (p === "wxc") {
            route = route.replace(
              Bmob._config.parameters.FILES,
              Bmob._config.parameters.FILESCHECK
            );
          }
          const sign = md5.utf8MD5(route + t + Bmob._config.securityCode + rand);
          const key = {
            "content-type": "application/json",
            "X-Bmob-SDK-Type": "wechatApp",
            "X-Bmob-Safe-Sign": sign,
            "X-Bmob-Safe-Timestamp": t,
            "X-Bmob-Noncestr-Key": rand,
            "X-Bmob-Session-Token": sessionToken,
            "X-Bmob-Secret-Key": Bmob._config.secretKey
          };
          const formData = Object.assign(
            {
              _ContentType: "text/plain",
              mime_type: "text/plain",
              category: "wechatApp",
              _ClientVersion: "js3.6.1",
              _InstallationId: "bmob"
            },
            key
          );
          for (let item of list) {
            let ro = item.route;
            if (p === "wxc") {
              ro = item.route.replace(
                Bmob._config.parameters.FILES,
                Bmob._config.parameters.FILESCHECK
              );
            }
            console.log(item.route, Bmob._config.parameters.FILESCHECK, "ror");
            wx.uploadFile({
              url: Bmob._config.host + ro,
              filePath: item.data,
              name: "file",
              header: key,
              formData,
              success: function(res) {
                let url = JSON.parse(res.data);
                if (p === "wxc") {
                  if (url.msg === "ok") {
                    resolve(that.fileUpload());
                  } else {
                    reject(url);
                  }
                } else {
                  data.push(url);
                  if (data.length === list.length) {
                    list = [];
                    resolve(data);
                    reject(data);
                  }
                }
              },
              fail: function(err) {
                data.push(err);
              }
            });
          }
        });
      }
      imgSecCheck() {
        if (!list.length) {
          throw new Error2(417);
        }
        return this.fileUpload("wxc");
      }
      save() {
        if (!list.length) {
          throw new Error2(417);
        }
        let fileObj;
        const type = utils.getAppType();
        if (type === "h5" || type === "nodejs") {
          fileObj = new Promise((resolve, reject) => {
            const data = [];
            for (let item of list) {
              request(item.route, "post", item.data).then((url) => {
                data.push(url);
                if (data.length === list.length) {
                  list = [];
                  resolve(data);
                  reject(data);
                }
              }).catch((err) => {
                data.push(err);
              });
            }
          });
        } else if (type === "wx") {
          if (!list.length) {
            throw new Error2(417);
          }
          return this.fileUpload("wx");
        } else if (type === "hap") {
          fileObj = new Promise((resolve, reject) => {
            if (void 0 === Bmob.User) {
              Bmob = require_bmob();
            }
            let sessionToken = "bmob";
            let current = Bmob.User.current();
            if (current) {
              sessionToken = current.sessionToken;
            }
            const data = [];
            const t = Math.round(new Date().getTime() / 1e3);
            const rand = Bmob.utils.randomString();
            const route = list[0].route;
            console.log("rand", rand, Bmob, route);
            const sign = md5.utf8MD5(route + t + Bmob._config.securityCode + rand);
            const key = {
              "content-type": "application/json",
              "X-Bmob-SDK-Type": "wechatApp",
              "X-Bmob-Safe-Sign": sign,
              "X-Bmob-Safe-Timestamp": t,
              "X-Bmob-Noncestr-Key": rand,
              "X-Bmob-Session-Token": sessionToken,
              "X-Bmob-Secret-Key": Bmob._config.secretKey
            };
            const formData = Object.assign(
              {
                _ContentType: "text/plain",
                mime_type: "text/plain",
                category: "wechatApp",
                _ClientVersion: "js3.6.1",
                _InstallationId: "bmob"
              },
              key
            );
            for (let item of list) {
              requestHap.upload({
                url: Bmob._config.host + item.route,
                files: [
                  {
                    uri: item.data,
                    name: "file",
                    filename: item.name
                  }
                ],
                header: {
                  "X-Bmob-SDK-Type": "wechatApp"
                },
                data: formData,
                success: function(res) {
                  console.log("handling success" + data);
                  let url = res.data;
                  data.push(url);
                  if (data.length === list.length) {
                    list = [];
                    resolve(data);
                    reject(data);
                  }
                },
                fail: function(data2, code) {
                  console.log(`handling fail, code = ${code}`);
                }
              });
            }
          });
        }
        return fileObj;
      }
      GetUrlRelativePath(url) {
        let arrUrl = url.split("//");
        let start = arrUrl[1].indexOf("/");
        let relUrl = arrUrl[1].substring(start);
        if (relUrl.indexOf("?") != -1) {
          relUrl = relUrl.split("?")[0];
        }
        return relUrl;
      }
      destroy(parma) {
        let par = "";
        if (isString(parma)) {
          par = this.GetUrlRelativePath(parma);
          return request(`${Bmob._config.parameters.FILES}/upyun/${par}`, "delete");
        } else if (isArray(parma)) {
          const data = [];
          parma.map((item) => {
            par = this.GetUrlRelativePath(item);
            data.push(par);
          });
          return request(Bmob._config.parameters.DELFILES, "post", {
            upyun: data
          });
        } else {
          throw new Error2(415);
        }
      }
    };
    module.exports = file;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/pay.js
var require_pay = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/pay.js"(exports, module) {
    var request = require_request();
    var Bmob = require_bmob();
    var Error2 = require_error();
    var pay = class {
      weApp(price, productName, body) {
        let openid = wx.getStorageSync("openid");
        if (!price || !productName || !body || !openid) {
          throw new Error2(416);
        }
        let data = { "order_price": price, "product_name": productName, "body": body, "open_id": openid, "pay_type": 4 };
        let route = Bmob._config.parameters.PAY;
        return request(route, "post", data);
      }
    };
    module.exports = pay;
  }
});

// node_modules/hydrogen-js-sdk/src/lib/socket.js
var require_socket = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/socket.js"(exports, module) {
    var Error2 = require_error();
    var Emitter = {
      setup(target) {
        let listeners = [];
        Object.assign(target, {
          on(type, handle) {
            if (typeof handle === "function") {
              listeners.push([type, handle]);
            }
          },
          emit(type, ...params) {
            listeners.forEach(
              ([listenType, handle]) => type === listenType && handle(...params)
            );
          },
          removeAllListeners() {
            listeners = [];
          }
        });
      }
    };
    module.exports = class socket {
      constructor(id = "") {
        if (id === "") {
          throw new Error2(415);
        }
        this.config = {
          host: "wss.bmobcloud.com"
        };
        Emitter.setup(this.emitter = {});
        this.applicationId = id;
        this.initialize();
      }
      handshake() {
        function complete(data2) {
          if (data2 instanceof Error2) {
            self.connecting = false;
            self.onError(data2.message);
          } else {
            return data2.split(":")[0];
          }
        }
        let url = "https://" + this.config.host + "/socket.io/1/?t=" + new Date().getTime();
        let dataObject = {};
        let data = JSON.stringify(dataObject);
        let method = "GET";
        return new Promise((resolve, reject) => {
          wx.request({
            method,
            url,
            data,
            header: {
              "content-type": "text/plain"
            },
            success: function(res) {
              if (res.data && res.data.statusCode) {
                return resolve("request error", e);
              } else if (res.statusCode !== 200) {
                return resolve("request error", e);
              } else {
                return resolve(complete(res.data));
              }
            },
            fail: function(e2) {
              return resolve("request error", e2);
            }
          });
        });
      }
      initialize() {
        this.emitter.removeAllListeners();
        this.handshake().then((protocol) => {
          try {
            let connectObj = this.connect(
              `wss://${this.config.host}/socket.io/1/websocket/` + protocol,
              {}
            );
            console.log(connectObj, "connectObj");
            connectObj.then((res) => {
              console.log(res, "res-res");
            });
          } catch (connectError) {
            console.error({ connectError });
            throw connectError;
          }
        });
        this.on("close", () => {
          console.log("\u8FDE\u63A5\u5DF2\u4E2D\u65AD");
          setTimeout(() => this.initialize(), 5e3);
        });
        return new Promise((resolve, reject) => {
          this.on("server_pub", (data) => {
            switch (data.action) {
              case "updateTable":
                this.onUpdateTable(data.tableName, data.data);
                break;
              case "updateRow":
                this.onUpdateRow(data.tableName, data.objectId, data.data);
                break;
              case "deleteTable":
                this.onDeleteTable(data.tableName, data.data);
                break;
              case "deleteRow":
                this.onDeleteRow(data.tableName, data.objectId, data.data);
                break;
            }
          });
          this.on("client_send_data", (resp) => {
            this.onInitListen();
          });
        });
      }
      onInitListen() {
      }
      connect(url, header) {
        const query = Object.keys(header).map((key) => `${key}=${encodeURIComponent(header[key])}`).join("&");
        const seperator = url.indexOf("?") > -1 ? "&" : "?";
        url = [url, query].join(seperator);
        return new Promise((resolve, reject) => {
          wx.onSocketOpen(resolve);
          wx.onSocketError(reject);
          wx.onSocketMessage((packet) => {
            try {
              let filter = function(str2) {
                const { name: name2, args: args2 } = JSON.parse(str2);
                return { name: name2, args: args2 };
              };
              let str = packet.data;
              let startStr = str.slice(0, 4);
              if (startStr === "2:::") {
                this.emit(false, true);
              }
              str = str.slice(4);
              if (str === null || str === "") {
                return;
              }
              const { name, args } = filter(str);
              let data = args == null ? "" : JSON.parse(args[0]);
              this.emitter.emit(name, data);
            } catch (e2) {
              console.log("Handle packet failed: " + packet.data, e2);
            }
          });
          wx.onSocketClose(() => this.emitter.emit("close"));
          wx.connectSocket({ url, header });
        });
      }
      on(message, handle) {
        this.emitter.on(message, handle);
      }
      emit(message, data) {
        data = data === void 0 ? "5:::" : "2:::";
        message = message ? JSON.stringify(message) : "";
        wx.sendSocketMessage({
          data: data + message
        });
      }
      emitData(name, data) {
        data = JSON.stringify(data);
        return { name, args: [data] };
      }
      updateTable(tablename) {
        let data = {
          appKey: this.applicationId,
          tableName: tablename,
          objectId: "",
          action: "updateTable"
        };
        data = this.emitData("client_sub", data);
        this.emit(data);
      }
      unsubUpdateTable(tablename) {
        let data = {
          appKey: this.applicationId,
          tableName: tablename,
          objectId: "",
          action: "unsub_updateTable"
        };
        data = this.emitData("client_unsub", data);
        this.emit(data);
      }
      updateRow(tablename, objectId) {
        let data = {
          appKey: this.applicationId,
          tableName: tablename,
          objectId,
          action: "updateRow"
        };
        data = this.emitData("client_sub", data);
        this.emit(data);
      }
      unsubUpdateRow(tablename, objectId) {
        let data = {
          appKey: this.applicationId,
          tableName: tablename,
          objectId,
          action: "unsub_updateRow"
        };
        data = this.emitData("client_unsub", data);
        this.emit(data);
      }
      deleteTable(tablename) {
        let data = {
          appKey: this.applicationId,
          tableName: tablename,
          objectId: "",
          action: "deleteTable"
        };
        data = this.emitData("client_sub", data);
        this.emit(data);
      }
      unsubDeleteTable(tablename) {
        let data = {
          appKey: this.applicationId,
          tableName: tablename,
          objectId: "",
          action: "unsub_deleteTable"
        };
        data = this.emitData("client_unsub", data);
        this.emit(data);
      }
      deleteRow(tablename, objectId) {
        let data = {
          appKey: this.applicationId,
          tableName: tablename,
          objectId,
          action: "deleteRow"
        };
        data = this.emitData("client_sub", data);
        this.emit(data);
      }
      unsubDeleteRow(tablename, objectId) {
        let data = {
          appKey: this.applicationId,
          tableName: tablename,
          objectId,
          action: "unsub_deleteRow"
        };
        data = this.emitData("client_unsub", data);
        this.emit(data);
      }
      onUpdateTable(tablename, data) {
      }
      onUpdateRow(tablename, objectId, data) {
      }
      onDeleteTable(tablename, data) {
      }
      onDeleteRow(tablename, objectId, data) {
      }
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/common.js
var require_common = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/common.js"(exports, module) {
    var request = require_request();
    var Bmob = require_bmob();
    var Error2 = require_error();
    var { isObject, isString } = require_dataType();
    var generateCode = (data) => {
      if (!isObject(data)) {
        throw new Error2(415);
      }
      let route = Bmob._config.parameters.GENERATECODE;
      return request(route, "post", data);
    };
    var mediaCheckAsync = (data) => {
      if (!isObject(data)) {
        throw new Error2(415);
      }
      let route = Bmob._config.parameters.MEDIACHECKASYNC;
      return request(route, "post", data);
    };
    var getAccessToken = () => {
      let route = Bmob._config.parameters.GETACCESSTOKEN;
      return request(route, "get");
    };
    var sendWeAppMessage = (data) => {
      if (!isObject(data)) {
        throw new Error2(415);
      }
      let route = Bmob._config.parameters.SENDWEAPPMESSAGE;
      return request(route, "post", data);
    };
    var refund = (data) => {
      if (!isObject(data)) {
        throw new Error2(415);
      }
      let route = Bmob._config.parameters.REFUND;
      return request(route, "post", data);
    };
    var notifyMsg = (data) => {
      if (!isObject(data)) {
        throw new Error2(415);
      }
      let route = Bmob._config.parameters.NOTIFYMSG;
      return request(route, "post", data);
    };
    var requestPasswordReset = (data) => {
      if (!isObject(data)) {
        throw new Error2(415);
      }
      let route = Bmob._config.parameters.REQUESTPASSWORDRESET;
      return request(route, "post", data);
    };
    var resetPasswordBySmsCode = (smsCode, data) => {
      if (!isString(smsCode)) {
        throw new Error2(415);
      }
      let route = `${Bmob._config.parameters.RESETPASSWORDBYSMSCODE}/${smsCode}`;
      return request(route, "put", data);
    };
    var updateUserPassword = (objectId, data) => {
      if (!isObject(data) || !isString(objectId)) {
        throw new Error2(415);
      }
      let route = `${Bmob._config.parameters.UPDATEUSERPASSWORD}/${objectId}`;
      return request(route, "put", data);
    };
    var checkMsg = (content) => {
      if (!isString(content)) {
        throw new Error2(415);
      }
      let route = `${Bmob._config.parameters.CHECK_MSG}`;
      const data = { content };
      return request(route, "post", data);
    };
    var timestamp = () => {
      let route = Bmob._config.parameters.TIMESTAMP;
      return request(route, "get");
    };
    var push = (data) => {
      if (!isObject(data)) {
        throw new Error2(415);
      }
      let route = Bmob._config.parameters.PUSH;
      return request(route, "post", data);
    };
    var functions = (funName, data) => {
      if (!data) {
        data = {};
      }
      if (!isString(funName)) {
        throw new Error2(415);
      }
      const route = `${Bmob._config.parameters.FUNCTIONS}/${funName}`;
      return new Promise((resolve, reject) => {
        request(route, "post", data).then(({ result }) => {
          try {
            resolve(JSON.parse(result));
          } catch (error) {
            resolve(result);
          }
        }).catch((err) => {
          reject(err);
        });
      });
    };
    var geoPoint = ({ latitude, longitude }) => {
      const validate = (latitude2, longitude2) => {
        if (latitude2 < -90) {
          throw new Error2(419);
        }
        if (latitude2 > 90) {
          throw new Error2(419);
        }
        if (longitude2 < -180) {
          throw new Error2(419);
        }
        if (longitude2 > 180) {
          throw new Error2(419);
        }
        return { latitude: latitude2, longitude: longitude2 };
      };
      validate(latitude, longitude);
      return {
        __type: "GeoPoint",
        latitude,
        longitude
      };
    };
    module.exports = {
      generateCode,
      getAccessToken,
      sendWeAppMessage,
      refund,
      notifyMsg,
      functions,
      timestamp,
      requestPasswordReset,
      resetPasswordBySmsCode,
      updateUserPassword,
      geoPoint,
      checkMsg,
      mediaCheckAsync,
      push
    };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/sms.js
var require_sms = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/sms.js"(exports, module) {
    var request = require_request();
    var Bmob = require_bmob();
    var Error2 = require_error();
    var { isObject, isString } = require_dataType();
    var requestSmsCode = (data, options) => {
      if (!isObject(data)) {
        throw new Error2(415);
      }
      let route = Bmob._config.parameters.REQUESTSMSCODE;
      return request(route, "post", data);
    };
    var verifySmsCode = (smscode, data, options) => {
      if (!isString(smscode)) {
        throw new Error2(415);
      }
      if (!isObject(data)) {
        throw new Error2(415);
      }
      let route = `${Bmob._config.parameters.VERIFYSMSCODE}/${smscode}`;
      return request(route, "post", data);
    };
    module.exports = { requestSmsCode, verifySmsCode };
  }
});

// node_modules/hydrogen-js-sdk/src/lib/app.js
var require_app = __commonJS({
  "node_modules/hydrogen-js-sdk/src/lib/app.js"(exports, module) {
    var Bmob = require_bmob();
    var Pointer = require_pointer();
    var Relation = require_relation();
    var Query = require_query();
    var User = require_user();
    var File = require_file();
    var Pay = require_pay();
    var Socket = require_socket();
    var {
      generateCode,
      mediaCheckAsync,
      getAccessToken,
      sendWeAppMessage,
      refund,
      notifyMsg,
      functions,
      timestamp,
      requestPasswordReset,
      resetPasswordBySmsCode,
      updateUserPassword,
      geoPoint,
      checkMsg,
      push
    } = require_common();
    var { requestSmsCode, verifySmsCode } = require_sms();
    Bmob.GeoPoint = geoPoint;
    Bmob.generateCode = generateCode;
    Bmob.mediaCheckAsync = mediaCheckAsync;
    Bmob.getAccessToken = getAccessToken;
    Bmob.sendWeAppMessage = sendWeAppMessage;
    Bmob.refund = refund;
    Bmob.checkMsg = checkMsg;
    Bmob.notifyMsg = notifyMsg;
    Bmob.requestSmsCode = requestSmsCode;
    Bmob.verifySmsCode = verifySmsCode;
    Bmob.run = Bmob.functions = functions;
    Bmob.timestamp = timestamp;
    Bmob.requestPasswordReset = requestPasswordReset;
    Bmob.resetPasswordBySmsCode = resetPasswordBySmsCode;
    Bmob.updateUserPassword = updateUserPassword;
    Bmob.push = push;
    Bmob.Pay = new Pay();
    Bmob.User = new User();
    Bmob.Socket = (id) => new Socket(id);
    Bmob.Query = (parmas) => new Query(parmas);
    Bmob.File = (name, object) => new File(name, object);
    Bmob.request = require_request();
    Bmob.type = Bmob.utils.getAppType();
    Bmob.Pointer = (parmas) => new Pointer(parmas);
    Bmob.Relation = (parmas) => new Relation(parmas);
    if (Bmob.type === "wx") {
      if (typeof tt !== "undefined") {
        tt.Bmob = Bmob;
      } else {
        wx.Bmob = Bmob;
      }
    } else if (Bmob.type === "h5") {
      window.Bmob = Bmob;
    } else if (Bmob.type === "hap") {
      global.Bmob = Bmob;
    } else if (Bmob.type === "nodejs") {
      global.Bmob = Bmob;
    }
    module.exports = Bmob;
  }
});

// node_modules/hydrogen-js-sdk/index.js
var require_hydrogen_js_sdk = __commonJS({
  "node_modules/hydrogen-js-sdk/index.js"(exports, module) {
    module.exports = require_app();
  }
});

// dep:hydrogen-js-sdk
var hydrogen_js_sdk_default = require_hydrogen_js_sdk();
export {
  hydrogen_js_sdk_default as default
};
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
//# sourceMappingURL=hydrogen-js-sdk.js.map
